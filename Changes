import React, { useState, useEffect } from "react";
import ReactFlow, { useReactFlow, Background } from "reactflow";
import "reactflow/dist/style.css";
import "./NewKibanaDisplay.css"; // Import the CSS file

const NewKibanaDisplay = ({ url }) => {
  const { setViewport } = useReactFlow(); // React Flow function to modify viewport
  const [nodes, setNodes] = useState([]); // Store nodes for React Flow
  const [edges, setEdges] = useState([]); // Store edges for React Flow
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchData();
  }, [url]);

  const fetchData = async () => {
    try {
      const response = await fetch(url);
      const jsonData = await response.json();

      // Generate initial nodes and edges
      const apiUris = jsonData.data.map((item, index) => ({
        id: `node-${index}`,
        data: { label: item.api_Uri },
        position: { x: 100, y: index * 150 }, // Stack nodes vertically
      }));

      const apiEdges = jsonData.data.map((item, index) => {
        if (index < jsonData.data.length - 1) {
          return {
            id: `edge-${index}`,
            source: `node-${index}`,
            target: `node-${index + 1}`,
          };
        }
        return null;
      }).filter(Boolean);

      setNodes(apiUris);
      setEdges(apiEdges);
    } catch (error) {
      console.error("Error fetching data", error);
    } finally {
      setLoading(false);
    }
  };

  const handleNodeClick = (event, node) => {
    // Add child nodes horizontally on click
    const newNodes = ["1", "2", "3"].map((label, index) => {
      const newNodeId = `${node.id}-child-${index}`;
      return {
        id: newNodeId,
        data: { label },
        position: { x: node.position.x + (index + 1) * 150, y: node.position.y }, // Stack horizontally
      };
    });

    const newEdges = newNodes.map((newNode) => ({
      id: `edge-${node.id}-${newNode.id}`,
      source: node.id,
      target: newNode.id,
    }));

    setNodes((prevNodes) => [...prevNodes, ...newNodes]);
    setEdges((prevEdges) => [...prevEdges, ...newEdges]);
  };

  // Function to zoom in and zoom out
  const zoomIn = () => setViewport({ x: 0, y: 0, zoom: 1.5 });
  const zoomOut = () => setViewport({ x: 0, y: 0, zoom: 0.8 });
  const resetView = () => setViewport({ x: 0, y: 0, zoom: 1 });

  return (
    <div className="kibana-display-container">
      <div className="controls">
        <button onClick={zoomIn}>Zoom In</button>
        <button onClick={zoomOut}>Zoom Out</button>
        <button onClick={resetView}>Reset</button>
      </div>

      <div className="reactflow-container">
        {loading ? (
          <p>Loading...</p>
        ) : (
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodeClick={handleNodeClick}
            fitView
          >
            <Background />
          </ReactFlow>
        )}
      </div>
    </div>
  );
};

export default NewKibanaDisplay;