import React, { useState, useEffect } from "react";
import ReactFlow, { Background } from "reactflow";
import "reactflow/dist/style.css";
import "./NewKibanaDisplay.css";

const NewKibanaDisplay = ({ url }) => {
  const [nodes, setNodes] = useState([]);
  const [edges, setEdges] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchData = async () => {
    try {
      const response = await fetch(url);
      const jsonData = await response.json();

      const apiUrls = jsonData.data.map((item, index) => ({
        id: `node-${index}`,
        data: { label: item.api_Uri },
        position: { x: 100, y: index * 150 },
      }));

      const apiEdges = jsonData.data.map((item, index) => {
        if (index < jsonData.data.length - 1) {
          return {
            id: `edge-${index}`,
            source: `node-${index}`,
            target: `node-${index + 1}`,
          };
        }
        return null;
      }).filter(Boolean);

      setNodes(apiUrls);
      setEdges(apiEdges);
    } catch (error) {
      console.error("Error fetching data:", error);
    } finally {
      setLoading(false);
    }
  };

  // This is the updated handleNodeClick function that will create horizontal child nodes
  const handleNodeClick = (event, node) => {
    const newNodes = ["1", "2", "3"].map((label, index) => {
      const newNodeId = `${node.id}-child-${index}`;
      return {
        id: newNodeId,
        data: { label },
        // Position children horizontally to the right of the parent node
        // The Y position remains the same as the parent for horizontal alignment
        position: { 
          x: node.position.x + 150 + (index * 150), // Spread horizontally with 150px spacing
          y: node.position.y // Keep same Y as parent for horizontal alignment
        },
      };
    });

    const newEdges = newNodes.map((newNode) => ({
      id: `edge-${node.id}-${newNode.id}`,
      source: node.id,
      target: newNode.id,
      // You can add styling for the edges here
      style: { stroke: '#555' },
      type: 'default', // You can use 'straight', 'step', 'smoothstep', 'bezier'
    }));

    setNodes((prevNodes) => [...prevNodes, ...newNodes]);
    setEdges((prevEdges) => [...prevEdges, ...newEdges]);
  };

  useEffect(() => {
    fetchData();
  }, [url]);

  return (
    <div className="reactflow-container">
      {loading ? (
        <p>Loading...</p>
      ) : (
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodeClick={handleNodeClick}
          fitView
        >
          <Background />
        </ReactFlow>
      )}
    </div>
  );
};

export default NewKibanaDisplay;