import React from 'react';

// Import the StepperComponent we just created
const StepperComponent = ({ steps }) => {
  const [hoveredStep, setHoveredStep] = React.useState(null);

  // Flatten steps to include children as separate steps in the UI
  const flattenSteps = () => {
    const flattened = [];
    
    steps.forEach(step => {
      // Add parent step
      flattened.push({
        ...step,
        isParent: true,
      });
      
      // Add children steps if the parent is in progress
      if (step.inProgress && step.children && step.children.length > 0) {
        step.children.forEach(child => {
          flattened.push({
            ...child,
            isChild: true,
            parentName: step.name
          });
        });
      }
    });
    
    return flattened;
  };

  const flattenedSteps = flattenSteps();

  // Calculate the progress percentage for the progress bar
  const calculateProgressPercentage = () => {
    const totalSteps = flattenedSteps.length;
    let completedSteps = 0;
    
    flattenedSteps.forEach(step => {
      if (step.completed) {
        completedSteps += 1;
      } else if (step.inProgress) {
        completedSteps += 0.5; // Count in-progress steps as half completed
      }
    });
    
    return (completedSteps / totalSteps) * 100;
  };

  // Handle mouse hover events
  const handleMouseEnter = (index) => {
    setHoveredStep(index);
  };

  const handleMouseLeave = () => {
    setHoveredStep(null);
  };

  return (
    <div className="w-full p-6 font-sans">
      <div className="relative flex justify-between items-center mb-10">
        {/* Background progress bar */}
        <div className="absolute h-0.5 bg-gray-200 w-full z-10"></div>
        
        {/* Completed progress bar */}
        <div 
          className="absolute h-0.5 bg-blue-500 z-20 transition-all duration-300"
          style={{ width: `${calculateProgressPercentage()}%` }}
        ></div>
        
        {/* Steps */}
        {flattenedSteps.map((step, index) => {
          const isCompleted = step.completed;
          const isActive = step.inProgress;
          const isHovered = hoveredStep === index;
          
          // Determine if this is a parent or child step
          if (step.isChild) {
            // Render child step as a smaller circle with tooltip
            return (
              <div 
                key={index} 
                className="relative"
                onMouseEnter={() => handleMouseEnter(index)}
                onMouseLeave={handleMouseLeave}
              >
                <div 
                  className={`w-3 h-3 rounded-full mb-0 cursor-pointer
                    ${isCompleted ? 'bg-blue-500' : 
                      isActive ? 'bg-blue-500' : 
                      'bg-gray-300'}`}
                ></div>
                
                {/* Tooltip showing the child's name */}
                <div 
                  className={`absolute top-6 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-80 text-white p-1 rounded text-xs z-50 whitespace-nowrap transition-opacity duration-200
                    ${isHovered ? 'visible opacity-100' : 'invisible opacity-0'}`}
                >
                  {step.name}
                </div>
              </div>
            );
          } else {
            // Render parent step
            return (
              <div 
                key={index} 
                className="flex flex-col items-center relative z-30"
                onMouseEnter={() => handleMouseEnter(index)}
                onMouseLeave={handleMouseLeave}
              >
                {/* Step circle */}
                <div 
                  className={`w-6 h-6 rounded-full flex justify-center items-center mb-2 cursor-pointer
                    ${isCompleted ? 'bg-blue-500 border-2 border-blue-500' : 
                      isActive ? 'bg-white border-2 border-blue-500' : 
                      'bg-white border-2 border-gray-300'}`}
                >
                  {isCompleted && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <polyline points="20 6 9 17 4 12"></polyline>
                    </svg>
                  )}
                </div>
                
                {/* Step text */}
                <div 
                  className={`text-xs text-center max-w-xs
                    ${isCompleted ? 'text-blue-500' : 
                      isActive ? 'text-blue-500 font-bold' : 
                      'text-gray-500'}`}
                >
                  {step.name}
                </div>
              </div>
            );
          }
        })}
      </div>
      
      {/* Demo content below stepper */}
      <div className="mt-8 border-t pt-4">
        <h2 className="text-xl font-bold mb-4">Would the customer like to complete the credit check now?</h2>
        <p className="text-sm text-gray-600 mb-6">(Recommend the customer to perform credit check before proceeding to get best fit offers)</p>
        
        <div className="flex space-x-4 mb-6">
          <button className="px-4 py-2 border border-blue-500 bg-white text-blue-500 hover:bg-blue-50 rounded">
            Yes<br />Ready to Buy
          </button>
          <button className="px-4 py-2 border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 rounded">
            No<br />Get Quote
          </button>
        </div>
        
        <h3 className="text-lg font-bold mt-8 mb-4">Customer Info</h3>
        
        <div className="grid grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Sales Rep ID*</label>
            <input 
              type="text" 
              className="w-full p-2 border border-gray-300 rounded" 
              value="ENC13" 
              readOnly 
            />
            <div className="text-xs text-gray-500 mt-1">TEAM 13 NON-COMMISSIONABLE</div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Account type</label>
            <div className="flex items-center">
              <input 
                type="text" 
                className="w-full p-2 border border-gray-300 rounded" 
                readOnly 
              />
              <div className="ml-2">
                <span className="text-sm font-medium text-gray-700">Why SMB?</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="inline-block ml-1">
                  <circle cx="12" cy="12" r="10"></circle>
                  <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                  <line x1="12" y1="17" x2="12.01" y2="17"></line>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Sample data matching the structure from the first image
const NEW_SMB_STEPS = [
  {
    name: 'Customer information',
    completed: false,
    inProgress: true,
    children: [
      { name: 'Scan ID/OTP', inProgress: true, completed: false },
      { name: 'Business information', inProgress: false, completed: false },
      { name: 'Credit information', inProgress: false, completed: false },
      { name: 'New business verification', inProgress: false, completed: false },
      { name: 'Credit check', inProgress: false, completed: false },
    ],
  },
  {
    name: 'Review credit application',
    inProgress: false,
    completed: false,
  },
  {
    name: 'SMB enrollment',
    inProgress: false,
    completed: false,
    children: [
      { name: 'DUNs Selection', inProgress: false, completed: false },
      { name: 'PoC information', inProgress: false, completed: false },
      { name: 'Account verification', inProgress: false, completed: false },
      { name: 'Retail account agreement', inProgress: false, completed: false },
      { name: 'Personal agreement', inProgress: false, completed: false },
      { name: 'Profile creation', inProgress: false, completed: false },
    ],
  },
  {
    name: 'Mybiz registration',
    inProgress: false,
    completed: false,
  },
  {
    name: 'Enrollment complete',
    inProgress: false,
    completed: false,
  }
];

const App = () => {
  return (
    <div className="p-4 max-w-4xl mx-auto">
      <StepperComponent steps={NEW_SMB_STEPS} />
    </div>
  );
};

export default App;