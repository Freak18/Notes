import React from 'react';
import styled from 'styled-components';
import AlternateCheckmark from '@vds/icons/alternate-checkmark';
import { Tooltip } from '@vds/tooltips';

// Styled Components
const StepperContainer = styled.div`
  display: flex;
  align-items: center;
  position: relative;
  padding: 20px 0;
`;

const StepWrapper = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
  z-index: 1;
  flex: 1;
`;

const StepConnector = styled.div`
  position: absolute;
  top: 10px; /* middle of StepCircle */
  left: 50%;
  height: 2px;
  width: 100%;
  background-color: black;
  z-index: 0;
`;

const StepCircle = styled.div`
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: ${({ inProgress, completed }) =>
    completed ? '#059669' : inProgress ? '#000000' : '#cbd5e1'};
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: ${({ hasChildren }) => (hasChildren ? 'pointer' : 'default')};
  z-index: 2;
`;

const StepLabel = styled.span`
  margin-top: 8px;
  font-weight: ${({ inProgress }) => (inProgress ? 'bold' : 'normal')};
  font-size: 12px;
  text-align: center;
`;

const ChildStepsContainer = styled.div`
  display: flex;
  gap: 8px;
  padding: 8px;
  flex-wrap: wrap;
`;

const ChildStepIcon = styled.div`
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: ${({ inProgress, completed }) =>
    completed ? '#059669' : inProgress ? '#000000' : '#cbd5e1'};
`;

const ChildStepLabel = styled.span`
  font-size: 10px;
  margin-left: 4px;
`;

const ChildStep = styled.div`
  display: flex;
  align-items: center;
`;

function Stepper({ steps, show = true }) {
  return (
    <>
      {show && (
        <StepperContainer>
          {steps.map((step, index) => {
            const hasChildren = step.children && step.children.length > 0;
            const isNotLast = index < steps.length - 1;

            return (
              <StepWrapper key={index}>
                {/* Render connecting line except for last step */}
                {isNotLast && <StepConnector />}

                {hasChildren ? (
                  <Tooltip
                    tooltipSize="small"
                    surface="light"
                    size="small"
                    renderAnchorElement={() => (
                      <StepCircle
                        inProgress={step.inProgress}
                        completed={step.completed}
                        hasChildren={true}
                      >
                        {step.completed && (
                          <AlternateCheckmark
                            color="#ffffff"
                            size="12px"
                            surface="light"
                          />
                        )}
                      </StepCircle>
                    )}
                  >
                    <ChildStepsContainer>
                      {step.children.map((childStep, childIndex) => (
                        <ChildStep key={childIndex}>
                          <ChildStepIcon
                            inProgress={childStep.inProgress}
                            completed={childStep.completed}
                          />
                          <ChildStepLabel>{childStep.name}</ChildStepLabel>
                        </ChildStep>
                      ))}
                    </ChildStepsContainer>
                  </Tooltip>
                ) : (
                  <StepCircle
                    inProgress={step.inProgress}
                    completed={step.completed}
                    hasChildren={false}
                  >
                    {step.completed && (
                      <AlternateCheckmark
                        color="#ffffff"
                        size="12px"
                        surface="light"
                      />
                    )}
                  </StepCircle>
                )}

                <StepLabel inProgress={step.inProgress}>{step.name}</StepLabel>
              </StepWrapper>
            );
          })}
        </StepperContainer>
      )}
    </>
  );
}

export default Stepper;