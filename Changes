import React from 'react';
import styled from 'styled-components';
import { AlternateCheckMark, ToolTip } from '@vds/components';

const StepperContainer = styled.div`
  position: relative;
  margin: 40px 0;
  padding: 0 20px;
`;

const StepWrapper = styled.div`
  display: flex;
  position: relative;
  justify-content: space-between;
  z-index: 2;
`;

const StepGroup = styled.div`
  display: flex;
  align-items: center;
  background-color: ${({ active }) => (active ? '#e5f3ff' : 'transparent')};
  border-radius: 8px;
  padding: 10px 20px;
`;

const NameText = styled.div`
  margin: 0 10px;
  font-weight: 500;
  white-space: nowrap;
`;

const TooltipWrapper = styled.div`
  margin: 0 10px;
  display: flex;
  align-items: center;
`;

// Positioned line only between first and last checkmark
const StepLine = styled.div`
  position: absolute;
  top: 28px; // adjust based on checkmark vertical alignment
  left: ${({ startPercent }) => startPercent}%;
  right: ${({ endPercent }) => endPercent}%;
  height: 2px;
  background-color: black;
  z-index: 1;
`;

function Stepper({ steps }) {
  const activeStepIndex = steps.findIndex(step => step.inProgress);
  const totalSteps = steps.length;

  // calculate horizontal line start and end
  const startPercent = (100 / totalSteps) / 2;
  const endPercent = (100 / totalSteps) / 2;

  return (
    <StepperContainer>
      <StepLine startPercent={startPercent} endPercent={startPercent} />
      <StepWrapper>
        {steps.map((step, index) => {
          const { completed, inProgress, children } = step;
          const isActiveGroup = index === activeStepIndex;

          return (
            <StepGroup key={index} active={isActiveGroup}>
              <AlternateCheckMark completed={completed} inProgress={inProgress} />
              <NameText>{step.name}</NameText>

              {children?.map((child, childIndex) => (
                <TooltipWrapper key={childIndex}>
                  <ToolTip content={child.name} />
                </TooltipWrapper>
              ))}
            </StepGroup>
          );
        })}
      </StepWrapper>
    </StepperContainer>
  );
}

export default Stepper;