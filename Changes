import React from 'react';
import styled from 'styled-components';
import AlternateCheckmark from '@vds/icons/alternate-checkmark';
import { Tooltip } from '@vds/tooltips';

// Styled Components
const StepperContainer = styled.div`
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  margin: 40px 0;
`;

const StepWrapper = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  flex: 1;
  position: relative;
  text-align: center;
`;

const StepConnector = styled.div`
  position: absolute;
  top: 28px;
  left: 0;
  right: 0;
  height: 2px;
  background-color: black;
  z-index: 0;
`;

const StepName = styled.span`
  font-weight: ${({ inProgress }) => (inProgress ? 'bold' : 'normal')};
  margin-bottom: 8px;
`;

const IconWrapper = styled.div`
  position: relative;
  z-index: 1;
`;

const ChildStepIcon = styled.div`
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: ${({ inProgress, completed }) =>
    inProgress ? '#000000' : completed ? '#059669' : '#cbd5e1'};
`;

// Component
function Stepper({ steps, show = true }) {
  return (
    <>
      {show && (
        <StepperContainer>
          <StepConnector />
          {steps.map((step, index) => (
            <StepWrapper key={index}>
              {/* Step Name */}
              <StepName inProgress={step.inProgress}>{step.name}</StepName>

              {/* Checkmark or Step Icon */}
              <IconWrapper>
                {step.completed ? (
                  <AlternateCheckmark
                    color={step.inProgress ? '#008331' : '#D8DADA'}
                    size="24px"
                    surface="light"
                  />
                ) : (
                  <Tooltip
                    renderAnchorElement={() => (
                      <ChildStepIcon
                        inProgress={step.inProgress}
                        completed={step.completed}
                      />
                    )}
                    size="small"
                    tooltipSize="small"
                    surface="light"
                  >
                    <div>
                      {step.children?.map((child, idx) => (
                        <div key={idx}>{child.name}</div>
                      ))}
                    </div>
                  </Tooltip>
                )}
              </IconWrapper>
            </StepWrapper>
          ))}
        </StepperContainer>
      )}
    </>
  );
}

export default Stepper;